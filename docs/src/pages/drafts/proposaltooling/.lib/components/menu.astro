---
const options = [
	{
		name: 'Customer Information',
		path: '/prototypes/proposaltooling/customer-information',
		switch: false,
	},
	{
		name: 'Solar Panels',
		path: '/prototypes/proposaltooling/solar-panels',
		switch: true,
	},
	{
		name: 'Battery System',
		path: '/prototypes/proposaltooling/battery-system',
		switch: true,
	},
	{
		name: 'Roof Replacement',
		path: '/prototypes/proposaltooling/roof-replacement',
		switch: true,
	},
	{
		name: 'Electrical Work',
		path: '/prototypes/proposaltooling/electrical-work',
		switch: true,
	},
	{
		name: 'Energy Efficiency',
		path: '/prototypes/proposaltooling/energy-efficiency',
		switch: true,
	},
	{ name: 'H.V.A.C', path: '/prototypes/proposaltooling/hvac', switch: true },
	{
		name: 'Geothermal Services',
		path: '/prototypes/proposaltooling/geothermal',
		switch: true,
	},
	{
		name: 'Other Project Adders',
		path: '/prototypes/proposaltooling/other-project-adders',
		switch: false,
	},
	{
		name: 'Additional Projects',
		path: '/prototypes/proposaltooling/additional-projects',
		switch: false,
	},
	{
		name: 'Internal Sales Notes',
		path: '/prototypes/proposaltooling/internal-sales-notes',
		switch: false,
	},
	{
		name: 'Financial',
		path: '/prototypes/proposaltooling/financial',
		switch: false,
	},
];
---

<dialog id='menu' data-is='bottomsheet'>
	<header>
		<hr id='menu__handle' />
		<h5>Navigation Menu</h5>
		<p>
			Select the items that you would like to include in this proposal.
			<br />Only available items are shown.
		</p>
	</header>

	{
		options.map((opt) => (
			<a href={opt.path} data-is='button'>
				<span>{opt.name}</span>

				{opt.switch && <input type='checkbox' data-is='switch' />}

				<i data-is='icon' data-part='trail'>
					arrow_forward_ios
				</i>
			</a>
		))
	}

	<script type='module' is:inline>
		window.addEventListener('DOMContentLoaded', () => {
			const menu = document.querySelector('#menu');
			const handle = document.querySelector('#menu__handle');
			if (!menu || !handle || !(menu instanceof HTMLDialogElement)) return;

			function handleClickOutside(event) {
				if (!menu.contains(event.target)) {
					menu.close();
				}
			}

			function handleEscKey(event) {
				if (event.key === 'Escape') {
					menu.close();
				}
			}

			addEventListener('menu:toggle', () => {
				if (menu.open) {
					menu.close();
				} else {
					menu.show();
					setTimeout(() => {
						document.addEventListener('click', handleClickOutside);
						document.addEventListener('keydown', handleEscKey);
					});
				}
			});

			menu.addEventListener('close', () => {
				document.removeEventListener('click', handleClickOutside);
				document.removeEventListener('keydown', handleEscKey);
			});

			document
				.querySelectorAll('[data-toggle-menu]')
				.forEach((el) =>
					el.addEventListener('click', () =>
						dispatchEvent(new CustomEvent('menu:toggle')),
					),
				);

			// ─────────────────────────────────────────────
			let startY = 0;
			let currentY = 0;
			let dragging = false;
			let pointerId = null;

			handle.addEventListener('pointerdown', (e) => {
				if (e.pointerType !== 'touch' && e.pointerType !== 'mouse') return;
				startY = e.clientY;
				currentY = startY;
				dragging = true;
				pointerId = e.pointerId;
				menu.style.transition = 'none';
				handle.setPointerCapture(pointerId);
			});

			handle.addEventListener('pointermove', (e) => {
				if (!dragging || e.pointerId !== pointerId) return;
				currentY = e.clientY;
				const delta = currentY - startY;
				if (delta > 0) {
					menu.style.transform = `translateY(${delta}px)`;
				}
			});

			const endDrag = () => {
				if (!dragging) return;
				const delta = currentY - startY;
				menu.style.transition = '';
				menu.style.transform = '';

				if (delta > 100) {
					menu.close();
				}

				dragging = false;
				pointerId = null;
			};

			handle.addEventListener('pointerup', endDrag);
			handle.addEventListener('pointercancel', endDrag);
		});
	</script>

	<style lang='css' is:inline>
		@scope (#menu) {
			:scope {
				background-color: var(--clr-background__base);
				max-height: 100%;
				height: calc(100dvh - 35%);

				#menu__handle {
					border-radius: var(--xs);
					cursor: grab;
					height: var(--xs);
					margin: var(--xl) auto;
					touch-action: none;
					width: min(100%, 100px);

					&:active {
						cursor: grabbing;
					}
				}

				header {
					background-color: inherit;
					border-bottom: solid 2px var(--clr-border__base);
					inset: 0;
					padding: 0 var(--md) var(--nm);
					position: sticky;
					z-index: 2;

					p {
						color: var(--clr-text__lowered);
						margin-top: var(--sm);
					}
				}

				:where(button, a) {
					background-color: inherit;
					border-radius: 0;
					text-decoration: none;
					width: 100%;

					& > input {
						flex-shrink: 0;
					}

					&:not(:last-of-type) {
						border-bottom: solid 2px var(--clr-border__base);
					}
				}
			}
		}
	</style>
</dialog>
