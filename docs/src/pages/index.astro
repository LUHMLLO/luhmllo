---
import Layout from '../layouts/app.astro';

interface RouteItem {
	path: string;
	name: string;
	title: string;
	description?: string;
	icon?: string;
	component?: unknown;
}

const modules = import.meta.glob('./**/*.{astro,mdx}');
const routes: RouteItem[] = [];

for (const path in modules) {
	const mod = modules[path] as Record<string, any>;

	// Format route path
	const cleanPath = path
		.replace('./', '/')
		.replace(/\/?index\.(astro|mdx)$/, '')
		.replace(/\.(astro|mdx)$/, '');

	const name = cleanPath.split('/').pop() || 'unknown';

	routes.push({
		path: cleanPath,
		name,
		title:
			mod.title ||
			name.replace(/[-_]/g, ' ').replace(/\b\w/g, (l) => l.toUpperCase()) ||
			'Untitled',
		description:
			mod.description ||
			mod.frontmatter?.description ||
			'No description available',
		icon: mod.icon || mod.frontmatter?.icon,
		component: mod.default,
	});
}

const getFolder = (route: RouteItem) => route.path.split('/')[1] || 'root';

const groupedRoutes = routes.reduce(
	(acc, route) => {
		const folder = getFolder(route);
		acc[folder] ||= [];
		acc[folder].push(route);
		return acc;
	},
	{} as Record<string, RouteItem[]>
);

for (const folder in groupedRoutes) {
	groupedRoutes[folder].sort((a, b) => a.name.localeCompare(b.name));
}

const apps: RouteItem[] = groupedRoutes['apps'] || [];
const elements: RouteItem[] = groupedRoutes['elements'] || [];
const learn: RouteItem[] = groupedRoutes['learn'] || [];
const mvps: RouteItem[] = groupedRoutes['mvps'] || [];
const sites: RouteItem[] = groupedRoutes['sites'] || [];
const sketches: RouteItem[] = groupedRoutes['sketches'] || [];
---

<Layout>
	<span data-is='badge'>
		<small>Think</small>
		<small>|</small>
		<small>Design</small>
		<small>|</small>
		<small>Craft</small>
		<small>|</small>
		<small>Deliver</small>
	</span>

	<br />

	<h1>Lilycat</h1>
	<p>
		A minimal, attribute-driven CSS library built for developers and designers
		who value clarity, speed, and control â€” without the hassle of steep learning
		curves. Lilycat lets you focus on delivery, not setup. No build steps. No
		clutter. Just building.
	</p>

	<br />

	<h6>Ready to simplify your CSS workflow?</h6>
	<ul>
		<li><a href='/docs'>Explore Documentation</a></li>
		<li><a href='/install'>Get the Package</a></li>
		<li><a href='/examples'>See Examples</a></li>
	</ul>

	<br />

	<h2>apps</h2>
	<div data-is='grid' style='--gap: var(--md); --cols: 4;'>
		{
			apps.map((el) => (
				<a href={el.path}>
					<span>{el.name}</span>
					<i data-is='icon'>north_east</i>
				</a>
			))
		}
	</div>

	<br />

	<h2>elements</h2>
	<div data-is='grid' style='--gap: var(--md); --cols: 4;'>
		{
			elements.map((el) => (
				<a href={el.path}>
					<span>{el.name}</span>
					<i data-is='icon'>north_east</i>
				</a>
			))
		}
	</div>

	<br />

	<h2>learn</h2>
	<div data-is='grid' style='--gap: var(--md); --cols: 4;'>
		{
			learn.map((el) => (
				<a href={el.path}>
					<span>{el.name}</span>
					<i data-is='icon'>north_east</i>
				</a>
			))
		}
	</div>

	<br />

	<h2>mvps</h2>
	<div data-is='grid' style='--gap: var(--md); --cols: 4;'>
		{
			mvps.map((el) => (
				<a href={el.path}>
					<span>{el.name}</span>
					<i data-is='icon'>north_east</i>
				</a>
			))
		}
	</div>

	<br />

	<h2>sites</h2>
	<div data-is='grid' style='--gap: var(--md); --cols: 4;'>
		{
			sites.map((el) => (
				<a href={el.path}>
					<span>{el.name}</span>
					<i data-is='icon'>north_east</i>
				</a>
			))
		}
	</div>

	<br />

	<h2>sketches</h2>
	<div data-is='grid' style='--gap: var(--md); --cols: 4;'>
		{
			sketches.map((el) => (
				<a href={el.path}>
					<span>{el.name}</span>
					<i data-is='icon'>north_east</i>
				</a>
			))
		}
	</div>
</Layout>
