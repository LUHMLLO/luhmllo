---
import Layout from '../layouts/app.astro';

interface RouteItem {
	path: string;
	name: string;
	title: string;
	description?: string;
	icon?: string;
	component?: unknown;
}

const modules = import.meta.glob('./**/*.{astro,mdx}');
const routes: RouteItem[] = [];

for (const path in modules) {
	const mod = modules[path] as Record<string, any>;

	// Format route path
	const cleanPath = path
		.replace('./', '/')
		.replace(/\/?index\.(astro|mdx)$/, '')
		.replace(/\.(astro|mdx)$/, '');

	const name = cleanPath.split('/').pop() || 'unknown';

	routes.push({
		path: cleanPath,
		name,
		title:
			mod.title ||
			name.replace(/[-_]/g, ' ').replace(/\b\w/g, (l) => l.toUpperCase()) ||
			'Untitled',
		description:
			mod.description ||
			mod.frontmatter?.description ||
			'No description available',
		icon: mod.icon || mod.frontmatter?.icon,
		component: mod.default,
	});
}

const getFolder = (route: RouteItem) => route.path.split('/')[1] || 'root';

const groupedRoutes = routes.reduce(
	(acc, route) => {
		const folder = getFolder(route);
		acc[folder] ||= [];
		acc[folder].push(route);
		return acc;
	},
	{} as Record<string, RouteItem[]>
);

for (const folder in groupedRoutes) {
	groupedRoutes[folder].sort((a, b) => a.name.localeCompare(b.name));
}

const apps: RouteItem[] = groupedRoutes['apps'] || [];
const elements: RouteItem[] = groupedRoutes['elements'] || [];
const learn: RouteItem[] = groupedRoutes['learn'] || [];
const mvps: RouteItem[] = [
	{
		path: '/mvps/proposaltooling',
		name: 'proposal tooling',
		title: 'proposal tooling',
	},
];
const sites: RouteItem[] = [
	{
		path: '/sites/halo',
		name: 'halo',
		title: 'halo',
	},
];
const sketches: RouteItem[] = groupedRoutes['sketches'] || [];
---

<Layout>
	<header data-is='stack' style='gap: var(--sm);'>
		<h1>Lilycat</h1>
		<p>
			A minimal, attribute-based CSS library that allows you to focus on
			delivery without any unnecessary extras. Featuring a mix of well-written
			convention rules designed to enhance the developer experience.
		</p>

		<a href='/preview'>Preview native elements</a>
	</header>

	<br />

	<div
		data-is='grid'
		style='--gap: var(--nm); --cols: 2; grid-auto-flow: row dense;'>
		<div data-is='card' style='outline-offset: 2px;'>
			<h2>Apps</h2>
			<div data-is='grid' style='--gap: var(--md); --cols: 4;'>
				{
					apps.map((el) => (
						<a href={el.path}>
							<span>{el.name}</span>
							<i data-is='icon'>north_east</i>
						</a>
					))
				}
			</div>
		</div>

		<div data-is='card' style='outline-offset: 2px;'>
			<h2>MVP(s)</h2>
			<div data-is='grid' style='--gap: var(--md); --cols: 4;'>
				{
					mvps.map((el) => (
						<a href={el.path}>
							<span>{el.name}</span>
							<i data-is='icon'>north_east</i>
						</a>
					))
				}
			</div>
		</div>

		<div data-is='card' style='outline-offset: 2px;'>
			<h2>Elements</h2>
			<div data-is='grid' style='--gap: var(--md); --cols: 4;'>
				{
					elements.map((el) => (
						<a href={el.path}>
							<span>{el.name}</span>
							<i data-is='icon'>north_east</i>
						</a>
					))
				}
			</div>
		</div>

		<div data-is='card' style='outline-offset: 2px;'>
			<h2>Learn</h2>
			<div data-is='grid' style='--gap: var(--md); --cols: 4;'>
				{
					learn.map((el) => (
						<a href={el.path}>
							<span>{el.name}</span>
							<i data-is='icon'>north_east</i>
						</a>
					))
				}
			</div>
		</div>

		<div data-is='card' style='outline-offset: 2px;'>
			<h2>Sites</h2>
			<div data-is='grid' style='--gap: var(--md); --cols: 4;'>
				{
					sites.map((el) => (
						<a href={el.path}>
							<span>{el.name}</span>
							<i data-is='icon'>north_east</i>
						</a>
					))
				}
			</div>
		</div>

		<div data-is='card' style='outline-offset: 2px;'>
			<h2>Sketches</h2>
			<div data-is='grid' style='--gap: var(--md); --cols: 4;'>
				{
					sketches.map((el) => (
						<a href={el.path}>
							<span>{el.name}</span>
							<i data-is='icon'>north_east</i>
						</a>
					))
				}
			</div>
		</div>
	</div>
</Layout>
