---
/**
 * Formats a number or string representing a number as currency.
 *
 * @param amount - The amount to format. Can be a number or a string that can be parsed as a number.
 * @returns A formatted string representing the currency value (USD by default), or "Invalid Amount or Type" if the input is invalid.
 */
export function FormatCurrency(amount: string | number): string {
	if (typeof amount !== 'number' && isNaN(parseFloat(String(amount)))) {
		return 'Invalid Amount or Type';
	}

	try {
		return new Intl.NumberFormat('en-US', {
			style: 'currency',
			currency: 'USD',
		}).format(parseFloat(String(amount)));
	} catch (error) {
		return 'Invalid Amount or Type';
	}
}

const data = [
	{
		name: 'List Name',
		description: 'List Subheading or Description',
		properties: [
			{
				percentage: '15%',
				product: 'Battery System',
				value: FormatCurrency(Math.floor(Math.random() * 10000)),
			},
			{
				percentage: '03%',
				product: 'Solar Panel',
				value: FormatCurrency(Math.floor(Math.random() * 10000)),
			},
			{
				percentage: '30%',
				product: 'HVAC',
				value: FormatCurrency(Math.floor(Math.random() * 10000)),
			},
			{
				percentage: '15%',
				product: 'Battery System',
				value: FormatCurrency(Math.floor(Math.random() * 10000)),
			},
		],
	},
	{
		name: 'List Name',
		description: 'List Subheading or Description',
		properties: [
			{
				percentage: '15%',
				product: 'Battery System',
				value: FormatCurrency(Math.floor(Math.random() * 10000)),
			},
			{
				percentage: '03%',
				product: 'Solar Panel',
				value: FormatCurrency(Math.floor(Math.random() * 10000)),
			},
			{
				percentage: '30%',
				product: 'HVAC',
				value: FormatCurrency(Math.floor(Math.random() * 10000)),
			},
			{
				percentage: '15%',
				product: 'Battery System',
				value: FormatCurrency(Math.floor(Math.random() * 10000)),
			},
		],
	},
];
---

<section>
	<header>
		<h2>Leaderboards</h2>
		<p>Datalist component preview</p>
	</header>

	<br />

	<div data-is='grid' style='--cols: 2; --gap: var(--nm);'>
		{
			data.map((el) => (
				<article data-is='card'>
					<header data-is='group' style='gap: var(--sm);'>
						<h5>{el.name}</h5>
						<small>{el.description}</small>
					</header>

					<ul role='list' data-is='stack' data-condition='marginless'>
						{el.properties.map((property) => (
							<li data-is='flex' style='gap: var(--md);'>
								<span>{property.percentage}</span>
								<span style='flex: 1 1; overflow: clip; text-overflow: ellipsis; white-space: nowrap;'>
									{property.product}
								</span>
								<span>{property.value}</span>
							</li>
						))}
					</ul>
				</article>
			))
		}
	</div>

	<style lang='css' is:inline>
		@scope {
			:scope {
				[data-is='card'] {
					background-color: var(--clr-background__raised);

					& > ul {
						li {
							padding-bottom: var(--sm);

							&:not(:last-child) {
								border-bottom: solid 2px var(--clr-border__base);
							}
						}
					}
				}
			}
		}
	</style>
</section>
