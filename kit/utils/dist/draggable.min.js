// deno-lint-ignore-file
var n = class { draggableElement; boundaryElement; options = {}; state = {}; activePointers; pinchState; inertiaFrameId; constructor (t, i, e) { this.draggableElement = t, this.boundaryElement = i, this.options = { dragSpeed: e.dragSpeed ?? 1.25, inertia: { damping: e.inertia?.damping ?? .92, threshold: e.inertia?.threshold ?? 1 }, mode: e.mode ?? "bounded", zoom: { enabled: e.zoom?.enabled ?? !0, initial: e.zoom?.initial ?? 1, min: e.zoom?.min ?? .5, max: e.zoom?.max ?? 1.5, smoothing: e.zoom?.smoothing ?? .75, zoomTo: e.zoom?.zoomTo ?? "cursor" } }, this.state = { primaryPointerId: -1, constraints: { boundingX: 0, boundingY: 0, minX: 0, maxX: 0, minY: 0, maxY: 0 }, isDragging: !1, isPinching: !1, movement: { offsetX: 0, offsetY: 0, startX: 0, startY: 0, velocityX: 0, velocityY: 0, lastTime: 0 }, zoom: this.options.zoom?.initial ?? 1 }, this.activePointers = new Map, this.pinchState = null, this.inertiaFrameId = null, this.pre() } pre() { if (!this.draggableElement) throw new Error(`Draggable requires a valid HTMLElement, but received: ${ this.draggableElement === null ? "null" : typeof this.draggableElement }`); if (this.options.mode === "bounded" && !this.boundaryElement) throw new Error(`Boundary requires a valid HTMLElement, but received: ${ this.boundaryElement === null ? "null" : typeof this.boundaryElement }`) } }; export { n as Draggable }
